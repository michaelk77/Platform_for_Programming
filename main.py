# -*- coding: utf-8 -*-


import datetime
from fake_useragent import UserAgent
import requests
from bs4 import BeautifulSoup
import telebot
import autopep8
from subprocess import run, PIPE
import time
import os
import random
from sqlalchemy import create_engine, MetaData, Table, Integer, String, \
    Column, select, update
import pymorphy2
import googletrans
import datetime as dt
import threading

from telebot import types

morph = pymorphy2.MorphAnalyzer()
metadata = MetaData()
engine = create_engine(os.environ['bd'])
Users = Table("Users", metadata,
              Column('id', Integer(), primary_key=True),
              Column('userid', String(100), unique=True, nullable=False),
              Column("balls", Integer()))

Superlist = Table("Superlist", metadata,
                  Column('id', Integer(), primary_key=True),
                  Column('userid', String(100), unique=True, nullable=False),
                  Column("premium", String(100)), Column("ban", String(100)))

metadata.create_all(engine)

keyboard1 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard1.row('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', 'Pep-8', "–£–ø–∞–∫–æ–≤–∫–∞ –≤ .py")
keyboard1.row("–ö–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞", "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
keyboard1.row("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Python")
keyboard1.row("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "Premium")

standartcomads = ["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "Pep-8", "–£–ø–∞–∫–æ–≤–∫–∞ –≤ .py", "–ö–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞", "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è",
                  "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Python", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"]

keyboard2 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard2.row("–ï—Å—Ç—å –≤–≤–æ–¥", "–í–≤–æ–¥–∞ –Ω–µ—Ç", "–û—Ç–º–µ–Ω–∞‚Üí")
keyboard3 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard3.row('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', "–ù–∞–∑–∞–¥‚Üí")
keyboard3.row('if/else', '–¶–∏–∫–ª—ã', "–û–ø–µ—Ä–∞—Ü–∏–∏")
keyboard3.row('–ü—Ä–∞–∫—Ç–∏–∫–∞', "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞")

teoriyamenu = ["–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–ù–∞–∑–∞–¥‚Üí", "if/else", "–¶–∏–∫–ª—ã", "–û–ø–µ—Ä–∞—Ü–∏–∏", "–ü—Ä–∞–∫—Ç–∏–∫–∞",
               "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞"]

keyboardpractice = telebot.types.ReplyKeyboardMarkup(True, True)
keyboardpractice.row('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.', '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.', "–ù–∞–∑–∞–¥")
keyboardpractice.row('if/else.', '–¶–∏–∫–ª—ã.', "–û–ø–µ—Ä–∞—Ü–∏–∏.")
keyboardpractice.row("–ë–∞–ª–ª—ã")

practicmenu = ['–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.', '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.', "–ù–∞–∑–∞–¥", 'if/else.', '–¶–∏–∫–ª—ã.', "–û–ø–µ—Ä–∞—Ü–∏–∏.", "–ë–∞–ª–ª—ã"]

keyboardadmin = telebot.types.ReplyKeyboardMarkup(True, True)
keyboardadmin.row('Ban', 'Premium.')

bot = telebot.TeleBot(os.environ['testbot'])
logbot = telebot.TeleBot(os.environ['logid'])

admin = os.environ['id']
banlist = []

inline_btn_1 = types.InlineKeyboardButton('–ß—Ç–æ –∂–µ —ç—Ç–æ –∑–∞ –±–æ—Ç?', callback_data='button1')
inline_kb1 = types.InlineKeyboardMarkup().add(inline_btn_1)
inline_btn_1 = types.InlineKeyboardButton('–ß—Ç–æ —Ç—É—Ç –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å?', callback_data='button2')
inline_btn_2 = types.InlineKeyboardButton('C—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏–º!', callback_data='button3')
inline_kb2 = types.InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)


@bot.message_handler(commands=['start'])
def process_command_1(message):
    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    logbot.send_message(admin, w)
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Çüëã", reply_markup=inline_kb1)


@bot.callback_query_handler(func=lambda call: True)
def bottonconfig(call):
    if call.data == "button1":
        process_callback_button1(call)
    elif call.data == "button2":
        process_callback_button2(call)
    elif call.data == "button3":
        process_callback_button3(call)


def process_callback_button1(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id,
                     '–î–∞–Ω–Ω—ã–π –±–æ—Ç —ç—Ç–∞ —Ü–µ–ª–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ python, '
                     '–Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∞—è —á—Ç–æ –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –ª–µ–Ω—å —á–∏—Ç–∞—Ç—å –ø—Ä–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ '
                     '—Ç—É—Ç –µ—Å—Ç—å',
                     reply_markup=inline_kb2)


def process_callback_button2(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id,
                     "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º:\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ "
                     "–∫–æ—Ç–æ—Ä–æ–π "
                     "–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –µ–≥–æ(–æ–±—Ä–∞—Ç–Ω–æ "
                     "–≤–æ–∑–º–æ–∂–Ω–∞ –ª–∏—à—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ "
                     "–æ—à–∏–±–∫–∞)\n\nPep-8 - "
                     "–æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É –∫–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã "
                     "–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–æ —ç—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É—á–µ–±–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ "
                     "–æ–±—è–∑—ã–≤–∞—é—Ç —É—á–µ–Ω–∏–∫–æ–≤ —Å–¥–∞–≤–∞—Ç—å –∫–æ–¥ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ Pep-8\n\n–£–ø–∞–∫–æ–≤–∫–∞ –≤ .py - "
                     "—Ñ—É–Ω–∫—Ü–∏—è –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª .py(–ø–æ–ª–µ–∑–Ω–∞ –∫–æ–≥–¥–∞ "
                     "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É)\n\n–ö–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ - –ü–æ–ª—É—á–µ–Ω–∏–µ python –∫–æ–¥–∞ –∏–∑ "
                     "–≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞\n\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Python - –û–ø–∏—Å–∞–Ω–∏–µ "
                     "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏\n\n–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ "
                     "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã 3 —Å–µ–∫—É–Ω–¥—ã(—ç—Ç–æ–≥–æ –≤–ø–æ–ª–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)(–≤ —Å–ª—É—á–∞–µ "
                     "–ø—Ä–∏–≤—ã—à–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ "
                     "—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ "
                     "–ø—Ä–æ–≥—Ä–∞–º–º–µ)\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: https://t.me/mkpythonbk –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ "
                     "—É–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞", reply_markup=keyboard1
                     )


def process_callback_button3(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id,
                     '–ù—É –ø–æ–µ—Ö–∞–ª–∏!', reply_markup=keyboard1)


@bot.message_handler(content_types=['text'])
def start(message):
    global banlist
    for i in banlist:
        if str(message.from_user.id) in i:
            tim = dt.datetime.strptime(i[1], "%Y-%m-%d")
            if tim > datetime.datetime.now():
                print("—á–µ–ª —Ç—ã –≤ –º—É—Ç–µ")
                w = str([message.text, message.from_user.id, message.from_user.first_name,
                         message.from_user.last_name, "–∫—Ç–æ —Ç–æ —Ä–≤–µ—Ç—Å—è –∏–∑ –±–∞–Ω–∞"])
                logbot.send_message(admin, w)
                bot.send_message(message.from_user.id, f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–æ {i[1]}")
                bot.register_next_step_handler(message, zab)
                return

    if message.text in practicmenu:
        practice3000(message)
        return
    if message.text in teoriyamenu:
        programingboster3000(message)
        return

    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    logbot.send_message(admin, w)

    if message.text == '/start':
        bot.send_message(message.from_user.id,
                         "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è python "
                         "–ø—Ä–æ–≥—Ä–∞–º–º –∏ –∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                         reply_markup=keyboard1)
    elif message.text == "/help" or message.text == "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è":
        bot.send_message(message.from_user.id,
                         "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º:\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ "
                         "–∫–æ—Ç–æ—Ä–æ–π "
                         "–±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –µ–≥–æ(–æ–±—Ä–∞—Ç–Ω–æ "
                         "–≤–æ–∑–º–æ–∂–Ω–∞ –ª–∏—à—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ "
                         "–æ—à–∏–±–∫–∞)\n\nPep-8 - "
                         "–æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É –∫–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã "
                         "–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–æ —ç—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É—á–µ–±–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ "
                         "–æ–±—è–∑—ã–≤–∞—é—Ç —É—á–µ–Ω–∏–∫–æ–≤ —Å–¥–∞–≤–∞—Ç—å –∫–æ–¥ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ Pep-8\n\n–£–ø–∞–∫–æ–≤–∫–∞ –≤ .py - "
                         "—Ñ—É–Ω–∫—Ü–∏—è –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª .py(–ø–æ–ª–µ–∑–Ω–∞ –∫–æ–≥–¥–∞ "
                         "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É)\n\n–ö–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ - –ü–æ–ª—É—á–µ–Ω–∏–µ python –∫–æ–¥–∞ –∏–∑ "
                         "–≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞\n\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Python - –û–ø–∏—Å–∞–Ω–∏–µ "
                         "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏\n\n–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ "
                         "–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã 3 —Å–µ–∫—É–Ω–¥—ã(—ç—Ç–æ–≥–æ –≤–ø–æ–ª–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)(–≤ —Å–ª—É—á–∞–µ "
                         "–ø—Ä–∏–≤—ã—à–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ "
                         "—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ "
                         "–ø—Ä–æ–≥—Ä–∞–º–º–µ)\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: https://t.me/mkpythonbk –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ "
                         "—É–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞",
                         reply_markup=keyboard1)
    elif message.text == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ":
        bot.send_message(message.from_user.id,
                         "–∂–¥—É –∫–æ–¥ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å")
        bot.register_next_step_handler(message, runpyprogramm)
    elif message.text == "Pep-8":
        bot.send_message(message.from_user.id,
                         "–ñ–¥—É –≤–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–µ –∫—Ä–∞—Å–∏–≤–æ–π")
        bot.register_next_step_handler(message, refpyprogramm)
    elif message.text == "–£–ø–∞–∫–æ–≤–∫–∞ –≤ .py":
        bot.send_message(message.from_user.id,
                         "–ñ–¥—É –∫–æ–¥ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏")
        bot.register_next_step_handler(message, upocov)
    elif message.text == "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Python":
        bot.send_message(message.from_user.id,
                         "–¢—É—Ç –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ python —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∞–±–æ—Ç—ã, "
                         "–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å "
                         "–Ω–∞—à–∏ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ", reply_markup=keyboard3)
        bot.register_next_step_handler(message, programingboster3000)
    elif message.text == "–ù–∞–∑–∞–¥‚Üí" or message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard1)
    elif message.text == "–ö–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞":
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –Ω–∞ –ø–∏—Ç–æ–Ω–µ")
        bot.register_next_step_handler(message, vipolnfromfile)
    elif message.text == "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è":
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ  –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        bot.register_next_step_handler(message, poiskdocumentation)
    elif message.from_user.id == admin and str(message.text).lower() in ["admin", "adminka", "–∞–¥–º–∏–Ω",
                                                                         "–∞–¥–º–∏–Ω–∫–∞"]:
        bot.send_message(message.from_user.id, "–í—Ö–æ–¥–∏–º –≤ –∞–¥–º–∏–Ω–∫—É", reply_markup=keyboardadmin)
        print("–ø—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω")
        bot.register_next_step_handler(message, adminka)
    elif message.text == "Premium":
        premiumfunc(message)
    elif message.text in standartcomads:
        start(message)
        return
    else:
        bot.send_message(message.from_user.id,
                         "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è",
                         reply_markup=keyboard1)
    print(message.from_user.id)


def runpyprogramm(message):
    if message.text in standartcomads:
        start(message)
        return
    if message.text in teoriyamenu:
        programingboster3000(message)
        return
    if message.text in practicmenu:
        practice3000(message)
        return

    try:
        w = str([message.text, message.from_user.id, message.from_user.first_name,
                 message.from_user.last_name])
        logbot.send_message(admin, w)
        z = str(message.text)
        print(z)
        if "sqlalchemy" in z or "psycopg2" in z:
            bot.send_message(message.from_user.id,
                             "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ sqlalchemy –∏–ª–∏ psycopg2",
                             reply_markup=keyboard1)
        if "pip" in z:
            bot.send_message(message.from_user.id,
                             "–ù–µ–ª—å–∑—è —Å–∫–∞—á–∏–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                             reply_markup=keyboard1)
            return
        if "webbrowser" in z:
            bot.send_message(message.from_user.id,
                             "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webbroser",
                             reply_markup=keyboard1)
            return
        if "antigravity" in z:
            bot.send_message(message.from_user.id,
                             "Antigravity –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞, –Ω–æ —Å—Å—ã–ª–∫—É –Ω–æ –∫–æ–º–∏–∫—Å –º—ã –æ—Å—Ç–∞–≤–∏–º "
                             "https://xkcd.com/353/",
                             reply_markup=keyboard1)
            return
        if " os" in z:
            bot.send_message(message.from_user.id,
                             "–º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π os –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å "
                             "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é",
                             reply_markup=keyboard1)
            return
        if "subprocess" in z:
            bot.send_message(message.from_user.id,
                             "–º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π subprocess –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å "
                             "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é",
                             reply_markup=keyboard1)
            return
        if "main.py" in z or "prog" in z:
            bot.send_message(message.from_user.id,
                             "–ú—ã —Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤(main –∏–ª–∏ prog), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ "
                             "–ø–µ—Ä–µ–º–µ–Ω—É–π—Ç–∏ "
                             "—Å–≤–æ–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
                             reply_markup=keyboard1)
            return
        if "requests" in z or "socket" in z or "flask" in z:
            bot.send_message(message.from_user.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫—é—á–µ–Ω—ã —Å —Ü–µ–ª—å—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç —Å–ø–∞–º–∞",
                             reply_markup=keyboard1)
            return
        r = open("prog" + str(message.from_user.id) + ".py", "w", encoding="UTF-8")
        print(z)
        print(z, file=r)
        r.close()

        if "input" in z or "stdin" in z:
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞")
            th = threading.Thread(bot.register_next_step_handler(message, sovvodom))
            th.start()
            th.join()
            return
        else:
            try:
                unactutpremium = 0
                w = str([message.text, message.from_user.id, message.from_user.first_name,
                         message.from_user.last_name])
                logbot.send_message(admin, w)
                s = select([Superlist]).where(Superlist.c.userid == str(message.from_user.id))
                conn = engine.connect()
                r = conn.execute(s)
                j = r.fetchall()
                print(j)
                try:
                    if j:
                        tim = dt.datetime.strptime(j[0][2], "%Y-%m-%d")
                        if dt.datetime.now() < tim:
                            unactutpremium = 1
                except:
                    print("–ø–æ—Ñ–∏–≥")
                if unactutpremium:
                    solution = run(["python3", "prog" + str(message.from_user.id) + ".py"],
                                   stdout=PIPE,
                                   encoding="UTF-8", stderr=PIPE,
                                   text=True, timeout=30)
                else:
                    solution = run(["python3", "prog" + str(message.from_user.id) + ".py"],
                                   stdout=PIPE,
                                   encoding="UTF-8", stderr=PIPE,
                                   text=True, timeout=3)
                er = solution.stderr.splitlines()
                print(solution.stdout)
                print("\n", er, "\n")
                if solution.stderr:
                    if 'Traceback (most recent call last):' == er[0]:
                        er = er[1:]
                    if "prog" in er[0]:
                        er = er[1:]
                    er = "\n".join(er)
                    print(er)
                    bot.send_message(message.from_user.id,
                                     "–í–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    bot.send_message(message.from_user.id, er, reply_markup=keyboard1)
                    os.remove(os.getcwd() + "/prog" + str(message.from_user.id) + ".py")
                    return
                if solution.stdout:
                    if len(str(solution.stdout)) > 4096:
                        for x in range(0, len(str(solution.stdout)), 4096):
                            bot.send_message(message.chat.id, str(solution.stdout)[x:x + 4096])
                    else:
                        bot.send_message(message.chat.id, str(solution.stdout))
                    bot.send_message(message.from_user.id, "‚¨Ü–≥–æ—Ç–æ–≤–æ‚¨Ü", reply_markup=keyboard1)
                else:
                    bot.send_message(message.from_user.id,
                                     "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ—Ç –≤—ã–≤–æ–¥–∞, –∏–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ(–±–æ—Ç "
                                     "–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã)")
                os.remove(os.getcwd() + "/prog" + str(message.from_user.id) + ".py")
            except Exception as e:
                bot.send_message(message.from_user.id, "–£ –≤–∞—Å –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ", reply_markup=keyboard1)
                print(str(e))
                logbot.send_message(admin, str(e))
        # bot.send_message(message.from_user.id, "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –µ—Å—Ç—å –≤–≤–æ–¥?", reply_markup=keyboard2)
        # bot.register_next_step_handler(message, vipoln)
    except Exception as e:
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        try:
            os.remove(os.getcwd() + "/prog" + str(message.from_user.id) + ".py")
        except:
            print("–ø–æ—Ñ–∏–≥")
        print(str(e))
        logbot.send_message(admin, str(e))


def vipoln(message):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞‚Üí":
            bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=keyboard1)
            return

        elif message.text == "–í–≤–æ–¥–∞ –Ω–µ—Ç":
            solution = run(["python3", "prog" + str(message.from_user.id) + ".py"], input="",
                           stdout=PIPE,
                           encoding="UTF-8",
                           text=True, timeout=15)
            print(solution.stdout)
            bot.send_message(message.from_user.id, str(solution.stdout))
            bot.send_message(message.from_user.id, "‚¨Ü–≥–æ—Ç–æ–≤–æ‚¨Ü", reply_markup=keyboard1)
            os.remove(os.getcwd() + "/prog" + str(message.from_user.id) + ".py")
            return
        """elif message.text == "–ï—Å—Ç—å –≤–≤–æ–¥":
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞")
            bot.register_next_step_handler(message, sovvodom)

        else:
            bot.send_message(message.from_user.id, "–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
                             reply_markup=keyboard1)"""
    except Exception as e:
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ", reply_markup=keyboard1)
        print(str(e))
        logbot.send_message(admin, str(e))


def sovvodom(message):
    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    logbot.send_message(admin, w)
    if message.text in standartcomads:
        start(message)
        return
    if message.text in teoriyamenu:
        programingboster3000(message)
        return
    if message.text in practicmenu:
        practice3000(message)
        return

    try:
        unactutpremium = 0
        w = str([message.text, message.from_user.id, message.from_user.first_name,
                 message.from_user.last_name])
        logbot.send_message(admin, w)
        s = select([Superlist]).where(Superlist.c.userid == str(message.from_user.id))
        conn = engine.connect()
        r = conn.execute(s)
        j = r.fetchall()
        print(j)
        try:
            if j:
                tim = dt.datetime.strptime(j[0][2], "%Y-%m-%d")
                if dt.datetime.now() < tim:
                    unactutpremium = 1
        except:
            print("net cviasy")
        if unactutpremium:
            print("prem")
            solution = run(["python3", "prog" + str(message.from_user.id) + ".py"],
                           input=message.text,
                           stdout=PIPE, encoding="UTF-8", stderr=PIPE,
                           text=True, timeout=30)
        else:
            solution = run(["python3", "prog" + str(message.from_user.id) + ".py"],
                           input=message.text,
                           stdout=PIPE, encoding="UTF-8", stderr=PIPE,
                           text=True, timeout=3)
        er = solution.stderr.splitlines()
        print(solution.stdout)
        print("\n", er, "\n")
        if solution.stderr:
            if 'Traceback (most recent call last):' == er[0]:
                er = er[1:]
            if "prog" in er[0]:
                er = er[1:]
            er = "\n".join(er)
            print(er)
            bot.send_message(message.from_user.id, "–í–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            bot.send_message(message.from_user.id, er, reply_markup=keyboard1)
            return
        if solution.stdout:
            if len(str(solution.stdout)) > 4096:
                for x in range(0, len(str(solution.stdout)), 4096):
                    bot.send_message(message.chat.id, str(solution.stdout)[x:x + 4096])
            else:
                bot.send_message(message.chat.id, str(solution.stdout))
            bot.send_message(message.from_user.id, "‚¨Ü–≥–æ—Ç–æ–≤–æ‚¨Ü", reply_markup=keyboard1)
        else:
            bot.send_message(message.from_user.id,
                             "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ—Ç –≤—ã–≤–æ–¥–∞, –∏–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ(–±–æ—Ç "
                             "–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã)")
        os.remove(os.getcwd() + "/prog" + str(message.from_user.id) + ".py")
    except Exception as e:
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –∏–ª–∏ –≤–æ –≤–≤–æ–¥–µ",
                         reply_markup=keyboard1)
        print(str(e))
        logbot.send_message(admin, str(e))


def refpyprogramm(message):
    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    logbot.send_message(admin, w)
    if message.text in standartcomads:
        start(message)
        return
    if message.text in teoriyamenu:
        programingboster3000(message)
        return
    if message.text in practicmenu:
        practice3000(message)
        return

    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    logbot.send_message(admin, w)
    z = message.text
    print(z)
    bot.send_message(message.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä—É—é")
    y = z.splitlines()
    for i in range(len(y)):
        kol = 0
        kol1 = 0
        if "print" in y[i]:
            j = 0
            while j < len(y[i]):
                if "\"" == y[i][j]:
                    kol += 1
                if "\'" == y[i][j]:
                    kol1 += 1
                if kol % 2 == 0 and kol1 % 2 == 0 and y[i][j] in "+-**//":
                    if y[i][j + 1] == y[i][j]:
                        y[i] = y[i][:j] + f" {y[i][j] + y[i][j]} " + y[i][j + 2:]
                        j += 3
                    else:
                        y[i] = y[i][:j] + f" {y[i][j]} " + y[i][j + 1:]
                        j += 2
                j += 1
    z = "\n".join(y)
    z = autopep8.fix_code(z, options={'aggressive': 10000})
    print(z)
    bot.send_message(message.from_user.id, z)
    bot.send_message(message.from_user.id, "‚¨Ü–ö–æ–¥ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω‚¨Ü")


def upocov(message):
    if message.text in standartcomads:
        start(message)
        return
    if message.text in teoriyamenu:
        programingboster3000(message)
        return
    if message.text in practicmenu:
        practice3000(message)
        return

    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    logbot.send_message(admin, w)
    z = message.text
    print(z)
    bot.send_message(message.from_user.id, "—É–ø–∞–∫–æ–≤—ã–≤–∞—é")
    r = open("prog" + str(message.from_user.id) + ".py", "w", encoding="UTF-8")
    print(z, file=r)
    r.close()
    r = open("prog" + str(message.from_user.id) + ".py", "r", encoding="UTF-8")
    bot.send_document(message.chat.id, r, visible_file_name="program.py")
    r = open("prog" + str(message.from_user.id) + ".py", "w", encoding="UTF-8")
    r.close()
    os.remove(os.getcwd() + "/prog" + str(message.from_user.id) + ".py")


def programingboster3000(message):
    if message.text in standartcomads:
        start(message)
        return
    if message.text in practicmenu:
        practice3000(message)
        return

    if message.text == "–ù–∞–∑–∞–¥‚Üí":
        bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard1)
        bot.register_next_step_handler(message, start)
        return
    elif message.text == "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö":
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = input()\nprint(a)\n\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–∞–Ω–µ—Ç —Ä–æ–≤–Ω–æ "
                         "—Ç–æ —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø–æ—Å–ª–µ –µ–µ —Å—Ç–∞—Ä—Ç–∞", reply_markup=keyboard1)
    elif message.text == "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö":
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = input()\nb = int(input())\n—Å = float(input())\n\n\n–í—ã "
                         "–≤–≤–æ–¥–∏—Ç–µ "
                         "3 –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ –ø–µ—Ä–≤–æ–µ —ç—Ç–æ —Å—Ç—Ä–æ—á–∫–∞, –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ, —Ç—Ä–µ—Ç—å–µ —ç—Ç–æ –Ω–µ—Ü–µ–ª–æ–µ "
                         "—á–∏—Å–ª–æ(–Ω–∞–ø—Ä–∏–º–µ—Ä 12.45)", reply_markup=keyboard1)
    elif message.text == "if/else":
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = int(input())\nb = int(input())\nif a == b:\n   print("
                         "\"–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ\")\nelse:\n   print(\"—Ä–∞–∑–Ω–æ–µ\")\n\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ "
                         "–≤–≤–æ–¥ 2 —á–∏—Å–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ—Ç —Ä–∞–≤–Ω—ã –ª–∏ –æ–Ω–∏ –∏–ª–∏ –Ω–µ—Ç",
                         reply_markup=keyboard1)
    elif message.text == "–¶–∏–∫–ª—ã":
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = int(input())\nb = int(input())\nfor i in range(a):\n   "
                         "print(b)\n\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ 2 —á–∏—Å–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ "
                         "–≤—ã–≤–æ–¥–∏—Ç 2 —á–∏—Å–ª–æ —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ –≤ –ø–µ—Ä–≤–æ–º —á–∏—Å–ª–µ",
                         reply_markup=keyboard1)
    elif message.text == "–û–ø–µ—Ä–∞—Ü–∏–∏":
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = int(input())\nb = int(input())\nz = a + b\nprint("
                         "z*2)\n\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤–≤–æ–¥ 2 —á–∏—Å–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ "
                         "—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ç–∏ —á–∏—Å–ª–∞ –∏ –∫–ª–∞–¥–µ—Ç –≤ –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –ø–æ—Ç–æ–º –≤—ã–≤–æ–¥–∏—Ç —ç—Ç—É "
                         "–Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É–º–Ω–æ–∂–∏–≤ –Ω–∞ 2\n—Ç–∞–∫–∂–µ –µ—Å—Ç—å:   +(—Å–ª–æ–∂–µ–Ω–∏–µ) /(–¥–µ–ª–µ–Ω–∏–µ) //("
                         "–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Ü–µ–ª–æ) **( "
                         "–≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å) %(–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è)", reply_markup=keyboard1)
    elif message.text == "–ü—Ä–∞–∫—Ç–∏–∫–∞":
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á",
                         reply_markup=keyboardpractice)
        bot.register_next_step_handler(message, practice3000)
    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞":
        bot.send_message(message.from_user.id,
                         "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: https://t.me/mkpythonbk –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –∏–∑ "
                         "–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞",
                         reply_markup=keyboard1)
    elif message.text in teoriyamenu:
        programingboster3000(message)
        return


def practice3000(message):
    if message.text in standartcomads:
        start(message)
        return
    if message.text in teoriyamenu:
        programingboster3000(message)
        return

    try:
        conn = engine.connect()
        z = select([Users]).where(
            Users.c.userid == str(message.from_user.id))
        r = conn.execute(z)
        i = list(r.first())
        if i:
            print("uze tut")
        else:
            ins = Users.insert().values(userid=str(message.from_user.id), balls=0)
            print(789)
            print(ins.compile().params)
            r = conn.execute(ins)
            s = select([Users])
            r = conn.execute(s)
            print(r.fetchall())
    except:
        try:
            ins = Users.insert().values(userid=str(message.from_user.id), balls=0)
            print(789)
            print(ins.compile().params)
            r = conn.execute(ins)
            s = select([Users])
            r = conn.execute(s)
            print(r.fetchall())
        except:
            print("–ù–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º –±–∞–ª–ª–æ–≤")
            bot.send_message(message.from_user.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º –±–∞–ª–ª–æ–≤")
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard1)
        bot.register_next_step_handler(message, start)
        return
    elif message.text == "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.":
        r = str(random.randint(1, 100))
        bot.send_message(message.from_user.id,
                         f"–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = input()\nprint(a)\n\n\n–í–≤–æ–¥:\n{r}\n\n\n –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç "
                         f"–ø—Ä–æ–≥—Ä–∞–º–º–∞?")
        print(r)
        bot.register_next_step_handler(message, proverkapracticy, r)
    elif message.text == "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.":
        a = random.randint(1, 100)
        b = random.randint(1, 100)
        c = round(random.uniform(1, 100), 2)
        r = random.randint(0, 2)
        t = ["a", "b", "c"]
        t2 = [a, b, c]
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = input()\nb = int(input())\n—Å = float(input())\n\n\n"
                         f"–í–≤–æ–¥:\n{a}\n{b}\n{c}\n\n\n–í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {t[r]}")
        print(a, b, c, r)
        bot.register_next_step_handler(message, proverkapracticy, t2[r])
    elif message.text == "if/else.":
        a = random.randint(2, 5)
        b = random.randint(2, 5)
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = int(input())\nb = int(input())\nif a == b:\n   print("
                         f"\"–¥–∞\")\nelse:\n   print(\"–Ω–µ—Ç\")\n\n\n–í–≤–æ–¥:\n{a}\n{b}\n\n\n–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç "
                         f"–ø—Ä–æ–≥—Ä–∞–º–º–∞?")
        print(a, b)
        if a == b:
            z = "–¥–∞"
        else:
            z = "–Ω–µ—Ç"
        bot.register_next_step_handler(message, proverkapracticy, z)
    elif message.text == "–¶–∏–∫–ª—ã.":
        a = random.randint(1, 3)
        b = random.randint(1, 9)
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = int(input())\nb = int(input())\nfor i in range(a):\n   "
                         f"print(b)\n\n\n–í–≤–æ–¥:\n{a}\n{b}\n\n\n–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–µ–¥–µ—Ç —á–∏—Å–ª–æ {b}")
        bot.register_next_step_handler(message, proverkapracticy, a)
    elif message.text == "–û–ø–µ—Ä–∞—Ü–∏–∏.":
        a = random.randint(1, 8)
        b = random.randint(1, 6)
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–≥—Ä–∞–º–º–∞:\na = int(input())\nb = int(input())\nz = a + b\nprint("
                         f"z*2)\n\n\n–í–≤–æ–¥:\n{a}\n{b}\n\n\n–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞?")
        bot.register_next_step_handler(message, proverkapracticy, (a + b) * 2)
    elif message.text == "–ë–∞–ª–ª—ã":
        try:
            conn = engine.connect()
            r = conn.execute(select([Users]).where(Users.c.userid == str(message.from_user.id)))
            bal = r.first()[-1]
            print(bal)
            balov = morph.parse('–±–∞–ª–ª—ã')[0]
            if 0 <= bal < 5:
                bot.send_message(message.from_user.id,
                                 f"—É –≤–∞—Å {bal} {balov.make_agree_with_number(bal).word}, —á—Ç–æ-—Ç–æ "
                                 f"–º–∞–ª–æ–≤–∞—Ç–æ",
                                 reply_markup=keyboardpractice)
            elif 5 <= bal < 10:
                bot.send_message(message.from_user.id,
                                 f"—É –≤–∞—Å {bal} {balov.make_agree_with_number(bal).word}, –Ω–µ–ø–ª–æ—Ö–æ",
                                 reply_markup=keyboardpractice)

            elif 10 <= bal < 50:
                bot.send_message(message.from_user.id,
                                 f"—É –≤–∞—Å {bal} {balov.make_agree_with_number(bal).word}, –∫–ª–∞—Å—Å",
                                 reply_markup=keyboardpractice)
            elif bal >= 50:
                bot.send_message(message.from_user.id,
                                 f"—É –≤–∞—Å {bal} {balov.make_agree_with_number(bal).word}, –ù–ï–í–ï–†–û–Ø–¢–ù–û",
                                 reply_markup=keyboardpractice)
            bot.register_next_step_handler(message, practice3000)
            print(2)
            return
        except:
            print("–ù–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º –±–∞–ª–ª–æ–≤")
            bot.send_message(message.from_user.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º –±–∞–ª–ª–æ–≤")
    elif message.text in practicmenu:
        practice3000(message)
        return


def proverkapracticy(message, trueansver):
    if message.text in standartcomads:
        start(message)
        return
    if message.text in teoriyamenu:
        programingboster3000(message)
        return
    if message.text in practicmenu:
        practice3000(message)
        return

    if message.text == "–ù–∞–∑–∞–¥‚Üí" or message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=keyboard1)
        return
    if message.text == trueansver or message.text == str(trueansver):
        print("pravilno")
        bot.send_message(message.from_user.id, "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ", reply_markup=keyboardpractice)
        conn = engine.connect()
        r = conn.execute(select([Users]).where(Users.c.userid == str(message.from_user.id)))
        bal = r.first()[-1]
        print(bal)
        conn.execute(update(Users).where(Users.c.userid == str(message.from_user.id)).values(
            balls=bal + 1))
        if bal == 0:
            bot.send_message(message.from_user.id,
                             "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –±–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º-–∂–µ –¥—É—Ö–µ",
                             reply_markup=keyboardpractice)
        elif bal <= 5:
            bot.send_message(message.from_user.id,
                             f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π {bal + 1} –±–∞–ª, –Ω–µ–ø–ª–æ—Ö–æ",
                             reply_markup=keyboardpractice)
        elif bal > 5:
            a = ["–æ—á–µ—Ä–µ–¥–Ω–æ–π", "–Ω–æ–≤—ã–π", "—Å–ª–µ–¥—É—é—â–∏–π"]
            bot.send_message(message.from_user.id,
                             f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π {random.choice(a)} –±–∞–ª, –≤—ã –º–æ–ª–æ–¥–µ—Ü",
                             reply_markup=keyboardpractice)


    else:
        bot.send_message(message.from_user.id,
                         f"–í—ã –æ—à–∏–±–ª–∏—Å—å –Ω–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {trueansver}",
                         reply_markup=keyboardpractice)
    bot.register_next_step_handler(message, practice3000)
    print(3)
    return


@bot.message_handler(content_types=['document'])
def vipolnfromfile(message):
    if message.text == None:
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            downloaded_file = downloaded_file.decode("UTF-8")
            downloaded_file = str(downloaded_file)
            print(downloaded_file)
            bot.send_message(message.from_user.id, downloaded_file)
            bot.send_message(message.from_user.id,
                             "‚¨Ü–í–æ—Ç‚¨Ü –≤–∞—à –∫–æ–¥, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ, "
                             "–≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü—É—é",
                             reply_markup=keyboard1)
        except:
            print("—á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ")
            bot.send_message(message.from_user.id,
                             "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=keyboard1)
    else:
        if message.text in standartcomads:
            start(message)
            return
        if message.text in teoriyamenu:
            programingboster3000(message)
            return
        if message.text in practicmenu:
            practice3000(message)
            return
        bot.send_message(message.from_user.id,
                         "–í—ã —è–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ", reply_markup=keyboard1)


def poiskdocumentation(message):
    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    logbot.send_message(admin, w)
    if message.text in teoriyamenu:
        programingboster3000(message)
        return
    if message.text in practicmenu:
        practice3000(message)
        return
    if message.text in standartcomads:
        start(message)
        return

    translator = googletrans.Translator()
    result = translator.translate(message.text)
    result = result.text
    result = "+".join(result.split())
    g = None
    try:
        url = f"https://yandex.ru/search/?text={result}+python+org"
        ua = UserAgent()
        response = requests.post(url, headers={"User-Agent": ua.random})
        # quote_list = soup.findAll("div", id="lenta-card__text-quote-escaped")
        soup_ing = str(BeautifulSoup(response.content, 'lxml'))
        soup_ing = str(soup_ing).split(";")
        for i in soup_ing:
            if "python.org" in i and "href" in i or "pypi.org" in i and "href" in i:
                a = i[i.index("href") + 6:i.index("tabindex") - 2]
                result = "%20".join(result.split("+"))
                print(a + "#:~:text=" + result)
                g = a + "#:~:text=" + result
                break
        if g:
            bot.send_message(message.from_user.id, g, reply_markup=keyboard1)
            return
        else:
            bot.send_message(message.from_user.id,
                             f"–ò–∑–≤–µ–Ω–∏—Ç–µ –Ω–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ –∏–∑ –∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ "
                             f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —Ç—É—Ç: {url}",
                             reply_markup=keyboard1)
    except Exception as e:
        bot.send_message(message.from_user.id,
                         "–£ –Ω–∞—Å –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º–º—ã",
                         reply_markup=keyboard1)
        print(str(e))
        logbot.send_message(admin, str(e))


def adminka(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    if message.text == "Ban":
        bot.register_next_step_handler(message, banim)
    elif message.text == "Premium.":
        bot.register_next_step_handler(message, prem)


def banim(message):
    global banlist
    try:
        id, days = str(message.text).split()
        conn = engine.connect()
        z = select([Superlist]).where(
            Superlist.c.userid == id)
        r = conn.execute(z)
        i = list(r.fetchall())
        print(i)
        if i[0][0]:
            print("uze tut")
            s = select([Superlist]).where(Superlist.c.userid == str(id))
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            if j[0][3]:
                tim = dt.datetime.strptime(j[0][3], "%Y-%m-%d")
            else:
                tim = dt.datetime.now()
            kon = str(max(dt.datetime.now(), tim).date() + dt.timedelta(int(days)))
            conn.execute(
                update(Superlist).where(Superlist.c.userid == str(id)).values(
                    ban=str(kon)))
            s = select([Superlist]).where(Superlist.c.userid == str(id))
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            bot.send_message(admin, f"ban –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][3]}")
            try:
                bot.send_message(int(id), f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {j[0][3]}")
            except:
                bot.send_message(admin, "–ê–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            podgruskaban()

        else:
            print("–Ω–æ–≤–µ–Ω—å–∫–∏–π")
            kon = str(dt.datetime.now().date() + dt.timedelta(int(days)))
            ins = Superlist.insert().values(userid=str(id), premium="", ban=kon)
            r = conn.execute(ins)
            print(789)
            print(ins.compile().params)
            s = select([Superlist]).where(Superlist.c.userid == str(id))
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            bot.send_message(admin, f"ban –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][3]}")
            try:
                bot.send_message(int(id), f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {j[0][3]}")
            except:
                bot.send_message(admin, "–ê–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            podgruskaban()
    except Exception as e:
        print(e)
        logbot.send_message(admin, str(e))
        try:
            id, days = str(message.text).split()
            kon = str(dt.datetime.now().date() + dt.timedelta(int(days)))
            ins = Superlist.insert().values(userid=id, ban=kon, premium="")
            print(ins.compile().params)
            r = conn.execute(ins)
            s = select([Superlist]).where(Superlist.c.userid == str(id))
            conn = engine.connect()
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            bot.send_message(admin, f"ban –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][3]}")
            try:
                bot.send_message(int(id), f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {j[0][3]}")
            except:
                bot.send_message(admin, "–ê–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            podgruskaban()
        except Exception as e:
            print(e)
            print("–ù–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º ban")
            bot.send_message(message.from_user.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º ban")


def prem(message):
    try:
        id, days = str(message.text).split()
        conn = engine.connect()
        z = select([Superlist]).where(
            Superlist.c.userid == id)
        r = conn.execute(z)
        i = list(r.fetchall())
        print(i)
        if i[0][0]:
            print("uze tut")
            s = select([Superlist]).where(Superlist.c.userid == str(id))
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            if j[0][2]:
                tim = dt.datetime.strptime(j[0][2], "%Y-%m-%d")
            else:
                tim = dt.datetime.now()
            kon = str(max(dt.datetime.now(), tim).date() + dt.timedelta(int(days)))
            conn.execute(
                update(Superlist).where(Superlist.c.userid == str(id)).values(
                    premium=str(kon)))
            s = select([Superlist]).where(Superlist.c.userid == str(id))
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            bot.send_message(admin, f"premium –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][2]}")
            try:
                bot.send_message(int(id), f"premium –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][2]}")
            except:
                bot.send_message(admin, "–ê–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        else:
            print("–Ω–æ–≤–µ–Ω—å–∫–∏–π")
            kon = str(dt.datetime.now().date() + dt.timedelta(int(days)))
            ins = Superlist.insert().values(userid=str(id), ban="", premium=kon)
            r = conn.execute(ins)
            print(789)
            print(ins.compile().params)
            s = select([Superlist]).where(Superlist.c.userid == str(id))
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            bot.send_message(admin, f"premium –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][2]}")
            try:
                bot.send_message(int(id), f"premium –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][2]}")
            except:
                bot.send_message(admin, "–ê–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(e)
        logbot.send_message(admin, str(e))
        try:
            id, days = str(message.text).split()
            kon = str(dt.datetime.now().date() + dt.timedelta(int(days)))
            ins = Superlist.insert().values(userid=id, ban="", premium=kon)
            print(ins.compile().params)
            r = conn.execute(ins)

            s = select([Superlist]).where(Superlist.c.userid == str(id))
            conn = engine.connect()
            r = conn.execute(s)
            j = r.fetchall()
            print(j)
            bot.send_message(admin, f"premium –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][2]}")
            try:
                bot.send_message(int(id), f"premium –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {j[0][2]}")
            except:
                bot.send_message(admin, "–ê–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            print(e)
            print("–ù–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º premium")
            bot.send_message(message.from_user.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤—è–∑–∏ —Å –º–æ–¥—É–ª–µ–º premium")


def premiumfunc(message):
    s = select([Superlist]).where(Superlist.c.userid == str(message.from_user.id))
    conn = engine.connect()
    r = conn.execute(s)
    j = r.fetchall()
    print(j)
    if j:
        tim = dt.datetime.strptime(j[0][2], "%Y-%m-%d")
        if dt.datetime.now() < tim:
            bot.send_message(message.from_user.id, f"–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ {j[0][2]}")
        else:
            bot.send_message(message.from_user.id, f"–í–∞—à –ø—Ä–µ–º–∏—É–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è {j[0][2]}")
            bot.send_message(message.from_user.id,
                             f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ –º–µ—Å—è—Ü —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 50 —Ä—É–±–ª–µ–π –Ω–∞ "
                             f"—Ç–∏–Ω—å–∫–æ—Ñ—Ñ –ø–æ –Ω–æ–º–µ—Ä—É 89680972248 —Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º "
                             f"{message.from_user.id}\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é —Ç–∞–∫ —á—Ç–æ "
                             f"–∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
    else:
        bot.send_message(message.from_user.id,
                         "Premium - –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –¥–æ 30 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —ç—Ç–æ")
        bot.send_message(message.from_user.id,
                         f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ –º–µ—Å—è—Ü —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 50 —Ä—É–±–ª–µ–π –Ω–∞ "
                         f"—Ç–∏–Ω—å–∫–æ—Ñ—Ñ –ø–æ –Ω–æ–º–µ—Ä—É 89680972248 —Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º "
                         f"{message.from_user.id}\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é —Ç–∞–∫ —á—Ç–æ "
                         f"–∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")


def podgruskaban():
    global banlist
    banlist = []

    try:
        conn = engine.connect()
        z = select([Superlist])
        r = conn.execute(z)
        i = list(r.fetchall())
        print(i)
        for j in i:
            if j[3]:
                banlist.append((j[1], j[3]))
        print(banlist)
    except Exception as e:
        print("pomogite", e)


def zab(message):
    podgruskaban()
    global banlist

    for i in banlist:
        if str(message.from_user.id) in i:
            tim = dt.datetime.strptime(i[1], "%Y-%m-%d")
            if tim > datetime.datetime.now():
                print("—á–µ–ª —Ç—ã –≤ –º—É—Ç–µ")

                w = str([message.text, message.from_user.id, message.from_user.first_name,
                         message.from_user.last_name, "–∫—Ç–æ —Ç–æ —Ä–≤–µ—Ç—Å—è –∏–∑ –±–∞–Ω–∞"])
                logbot.send_message(admin, w)

                bot.send_message(message.from_user.id, f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–æ {i[1]}")
                bot.register_next_step_handler(message, zab)
                return
    bot.register_next_step_handler(message, start)


podgruskaban()

while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        time.sleep(1)
        print(str(e))
        logbot.send_message(admin, str(e))
